{"version":3,"sources":["Components/Screen/Screen.js","assets/keyCodes.js","Components/Calculator/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["Screen","render","className","props","text","Component","numberCodes","operationCodes","operatorLast","Calculator","state","operations","operands","res","mathFunctions","add","subtract","multiply","divide","exponent","componentDidMount","document","addEventListener","handleKeyUp","e","key","addToScreen","changePercent","calculate","deleteLast","resetScreen","isOperator","input","setOperator","length","setState","isDecimal","addDecimal","lastIdx","currentOperand","newOperands","slice","includes","toString","isNegative","operand","changeValue","findMathFunction","operation","findOperation","targetOperations","a","i","firstOperand","secondOperand","Number","splice","operationsToMutate","operandsToMutate","num1","num2","Math","pow","placeCommas","str","toSlice","decimal","pop","screenText","forEach","console","log","onClick","bind","App","React","Boolean","window","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.58c1b3ae.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport '../../css/Screen.css'\n\nclass Screen extends Component {\n    render = () => {\n        return (\n            <div className=\"screen\"><span>{this.props.text}</span></div>\n        )\n    }\n}\n\nexport default Screen;","const numberCodes = {\n    \"0\": \"0\",\n    \"1\": \"1\",\n    \"2\": \"2\",\n    \"3\": \"3\",\n    \"4\": \"4\",\n    \"5\": \"5\",\n    \"6\": \"6\",\n    \"7\": \"7\",\n    \"8\": \"8\",\n    \"9\": \"9\",\n    \".\": \".\"\n}\n\nconst operationCodes = {\n    \"^\": \"^\",\n    \"*\": \"*\",\n    \"x\": \"*\",\n    \"X\": \"*\",\n    \"+\": \"+\",\n    \"-\": \"-\",\n    \"/\": \"/\"\n}\n\nexport {numberCodes, operationCodes}","import React, {Component} from 'react';\nimport Screen from '../Screen/Screen';\nimport {numberCodes, operationCodes} from '../../assets/keyCodes';\nimport '../../css/Calculator.css';\n\nlet operatorLast = false;\n\nclass Calculator extends Component {\n    constructor(props) {\n        super(props);\n        this.handleKeyUp = this.handleKeyUp.bind(this);\n    }\n    \n    state = {\n        operations: [],\n        operands: [\"0\"],\n        res: 0\n    }\n\n    mathFunctions = {\n        \"+\": () => this.add,\n        \"-\": () => this.subtract,\n        \"*\": () => this.multiply,\n        \"/\": () => this.divide,\n        \"^\": () => this.exponent\n    }\n\n    componentDidMount = () => {\n        document.addEventListener(\"keyup\", this.handleKeyUp);\n    } // End of componentDidMount() function\n    \n    handleKeyUp = (e) => {\n        if(operationCodes[e.key]) {\n            // If the key pressed is an operation add it to the screen\n            this.addToScreen(operationCodes[e.key]);\n\n        } else if(e.key === \"%\") {\n            // If the key pressed is percent, change the operand to a percent\n            this.changePercent();\n\n        } else if(e.key === \"=\" || e.key === \"Enter\") {\n            // If the key pressed is the equal sign or enter/return then calculate\n            this.calculate();\n\n        }  else if(e.key === \"Backspace\") {\n            // If the key pressed is backspace, then delete last input\n            this.deleteLast();\n\n        }  else if(e.key === \"Escape\") {\n            // If the key pressed is escape, then reset the calculator screen\n            this.resetScreen();\n\n        } else if(numberCodes[e.key]) {\n            // if the key pressed is a number then add to the screen\n            this.addToScreen(numberCodes[e.key]);\n        }\n    } // End of handleKeyUp() function\n\n    isOperator = (input) => {\n        return input === \"+\" || input === \"-\" || input === \"*\" || input === \"/\" || input === \"^\";\n    } // End of isOperator() function\n\n    setOperator = (input) => {\n        let {operations, operands} = this.state;\n\n        if(!operands.length) {\n            this.setState({operations: [...operations, input], operands: [0]});\n        } else {\n            this.setState({operations: [...operations, input], operands: [...operands, \"0\"]});\n        }\n\n        operatorLast = true;\n    } // End of setOperator() function\n\n    isDecimal = (input) => input === \".\";\n\n    addDecimal = () => {\n        let {operands} = this.state;\n        let lastIdx = operands.length - 1;\n        let currentOperand = operands[lastIdx];\n        let newOperands = operands.slice(0, lastIdx);\n\n        if(!currentOperand.includes(\".\")) {\n            if(currentOperand === \"0\") {\n                this.setState({operands: [...newOperands, \"0.\"]});\n            } else {\n                this.setState({operands: [...newOperands, currentOperand + \".\"]});\n            }\n        }\n    } // End of addDecimal() function\n\n    addToScreen = (input) => {\n        let {operands, res} = this.state; // Grabbing all operations and operands from state\n        let lastIdx = operands.length - 1; // Grabbing the last index of the operands\n        let currentOperand = operands[lastIdx]; // Grabbing the current operand (last in the arr)\n        let newOperands = operands.slice(0, lastIdx); // Grabbing the operands arr w/o the current operand\n\n        if(this.isOperator(input)) {\n            // If the input is an operator, and the last input isn't an operator then the operator is set\n            if(!operatorLast) this.setOperator(input);\n\n        } else {\n            if(this.isDecimal(input)) {\n                this.addDecimal(input);\n            } else if(operands[0] === res.toString()) {\n                this.setState(({operands: [input], res: 0}));\n            }else {\n                if(currentOperand === \"0\") {\n                    this.setState({operands: [...newOperands, input]});\n                } else {\n                    this.setState({operands: [...newOperands, currentOperand + input]});\n                }\n                operatorLast = false;\n            }\n        }\n    } // End of addToScreen() function\n\n    isNegative = (operand) => operand[0] === \"-\";\n\n    changeValue = () => {\n        let {operands}  = this.state;\n        let lastIdx = operands.length - 1; // Grabbing the last index of the operands\n        let currentOperand = operands[lastIdx]; // Grabbing the current operand (last in the arr)\n        let newOperands = operands.slice(0, lastIdx); // Grabbing the operands arr w/o the current operand\n        \n        if(this.isNegative(currentOperand)) {\n            this.setState({operands: [...newOperands, currentOperand.slice(1)]})\n        } else {\n            if(currentOperand === \"0\") {\n                this.setState({operands: [...newOperands, \"-\"]})\n            } else {\n                this.setState({operands: [...newOperands, \"-\" + currentOperand]})\n            }\n        }\n    } // End of changeValue() function\n\n    changePercent = () => {\n        let {operands}  = this.state;\n        let lastIdx = operands.length - 1; // Grabbing the last index of the operands\n        let currentOperand = operands[lastIdx]; // Grabbing the current operand (last in the arr)\n        let newOperands = operands.slice(0, lastIdx); // Grabbing the operands arr w/o the current operand\n\n        this.setState({operands: [...newOperands, (currentOperand / 100).toString()]});\n    } // End of changePercent() function\n\n    resetScreen = () => { \n        this.setState({operations: [], operands: [\"0\"]});\n    } // End of resetScreen() function\n\n    findMathFunction = (operation) => this.mathFunctions[operation]();\n\n    findOperation = async (targetOperations, operations, operands) => {\n        let i = 0;\n        while(i < operations.length) {\n            let operation = operations[i];\n            let firstOperand = operands[i];\n            let secondOperand = operands[i + 1];\n\n            if(operation === targetOperations[0] || operation === targetOperations[1]) {\n                let res = await this.findMathFunction(operation)(Number(firstOperand), Number(secondOperand));\n                operands.splice(i, 2, res);\n                operations.splice(i, 1);\n            } else {\n                i++;\n            }\n        }\n    } // End of findOperation() function\n\n    calculate = async () => {\n        let {operations, operands} = this.state;\n        if(!operations.length) return;\n\n        let operationsToMutate = [...operations];\n        let operandsToMutate = [...operands];\n\n        if(!operatorLast) {\n            await this.findOperation([\"^\"], operationsToMutate, operandsToMutate);\n\n            await this.findOperation([\"*\", \"/\"], operationsToMutate, operandsToMutate);\n\n            await this.findOperation([\"+\", \"-\"], operationsToMutate, operandsToMutate);\n\n            this.setState({operations: [], operands: [operandsToMutate[0].toString()], res: [operandsToMutate[0]]})\n        }\n    } // End of calculate() function\n\n    add = (num1, num2) => num1 + num2;\n\n    subtract = (num1, num2) => num1 - num2;\n\n    multiply = (num1, num2) => num1 * num2;\n\n    divide = (num1, num2) => num1 / num2;\n\n    exponent = (num1, num2) => Math.pow(num1, num2)\n\n    placeCommas = (str) => {\n        let res = \"\";\n        let toSlice = \"\";\n        let decimal = \"\";\n\n        if(str[0] !== \"-\") {\n            if(str.length > 3) {\n                for(let i = 0; i < str.length; i++) {\n                    if(str[i] === \".\") {\n                        toSlice = str.slice(0, i);\n                        decimal = str.slice(i);\n                    }\n                } \n            }\n    \n            if(!toSlice) toSlice = str;\n    \n            while(toSlice.length > 3) {\n                let sliced = toSlice.slice(-3);\n                res = \",\" + sliced + res;\n                toSlice = toSlice.slice(0, -3);\n            }\n        } else {\n            if(str.length > 4) {\n                for(let i = 0; i < str.length; i++) {\n                    if(str[i] === \".\") {\n                        toSlice = str.slice(0, i);\n                        decimal = str.slice(i);\n                    }\n                } \n            }\n    \n            if(!toSlice) toSlice = str;\n    \n            while(toSlice.length > 4) {\n                let sliced = toSlice.slice(-3);\n                res += \",\" + sliced;\n                toSlice = toSlice.slice(0, -3);\n            }\n        }\n\n\n        return toSlice + res + decimal;\n    } // End of placeCommas() function\n\n    deleteLast = () => {\n        let {operations, operands} = this.state\n        let operandsToMutate = [...operands];\n        let lastIdx = operandsToMutate.length - 1;\n        let currentOperand = operandsToMutate[lastIdx];\n        let newOperands = operandsToMutate.slice(0, lastIdx);\n\n        if(operandsToMutate.length === operations.length || !currentOperand.length) {\n            if(!currentOperand.length) {\n                operandsToMutate.pop()\n                this.setState({operations: operations.slice(0, operations.length -1), operands: operandsToMutate});\n            } else {\n                this.setState({operations: operations.slice(0, operations.length -1)});\n            }\n        } else {\n            currentOperand = currentOperand.slice(0, currentOperand.length - 1);\n            if(operands.length === 1) {\n                this.setState({operands: [...newOperands, \"0\"]})\n            } else {\n                this.setState({operands: [...newOperands, currentOperand]});\n            }\n        }\n    } // End of deleteLast() function\n    \n    render = () => {\n        let screenText = \"\";\n        let {operations, operands}  = this.state;\n\n        operands.forEach((operand, i) => {\n            if(operations[i]) {\n                screenText += this.placeCommas(operand.toString()) + operations[i];\n            } else {\n                screenText += this.placeCommas(operand.toString())\n            }\n        })\n\n        console.log(this.state);\n        return (\n            <div className={this.props.className}>\n                <Screen className=\"screen\" text={screenText}/>\n                <button onClick={this.resetScreen} className=\"red\">C</button>\n                <button onClick={this.deleteLast} className=\"red delete\">&#9003;</button>\n                <button className=\"operator orange\" onClick={this.changeValue}>+/=</button>\n                <button className=\"orange\" onClick={this.changePercent}>%</button>\n                <button onClick={() => this.addToScreen(\"1\")}>1</button>\n                <button onClick={() => this.addToScreen(\"2\")}>2</button>\n                <button onClick={() => this.addToScreen(\"3\")}>3</button>\n                <button className=\"operator orange\" onClick={() => this.addToScreen(\"+\")}>+</button>\n                <button className=\"operator orange\" onClick={() => this.addToScreen(\"-\")}>-</button>\n                <button onClick={() => this.addToScreen(\"4\")}>4</button>\n                <button onClick={() => this.addToScreen(\"5\")}>5</button>\n                <button onClick={() => this.addToScreen(\"6\")}>6</button>\n                <button className=\"operator orange\" onClick={() => this.addToScreen(\"*\")}>X</button>\n                <button className=\"operator orange\" onClick={() => this.addToScreen(\"/\")}>&divide;</button>\n                <button onClick={() => this.addToScreen(\"7\")}>7</button>\n                <button onClick={() => this.addToScreen(\"8\")}>8</button>\n                <button onClick={() => this.addToScreen(\"9\")}>9</button>\n                <button className=\"operator orange\" onClick={() => this.addToScreen(\".\")}>.</button>\n                <button className=\"orange\" onClick={() => this.addToScreen(\"^\")}>^</button>\n                <button className=\"zero\" onClick={() => this.addToScreen(\"0\")}>0</button>\n                <button className=\"operator equal orange\" onClick={this.calculate}>=</button>\n            </div>\n        )\n    }\n}\n\nexport default Calculator;","import React from 'react';\nimport './App.css';\nimport Calculator from './Components/Calculator/Calculator';\n\nclass App extends React.Component {\n  render = () => {\n    return (\n      <Calculator className=\"calculator\" />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}